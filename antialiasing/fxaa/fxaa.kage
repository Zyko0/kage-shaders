// License: Subject to the terms of this Agreement, NVIDIA hereby grants to Developer a royalty-free, non-exclusive license to possess and to use the Materials.
// The following terms apply to the specified type of Material:
// Source Code: Developer shall have the right to modify and create derivative works with the Source Code.
// Developer shall own any derivative works ("Derivatives") it creates to the Source Code, provided that Developer uses the Materials in accordance with the terms of this Agreement.
// Developer may distribute the Derivatives, provided that all NVIDIA copyright notices and trademarks are used properly and the Derivatives include the following statement:
// "This software contains source code provided by NVIDIA Corporation."

//kage:unit pixels

// Based on https://www.shadertoy.com/view/stlSzf
// And therefore based on the tutorial: http://blog.simonrodriguez.fr/articles/2016/07/implementing_fxaa.html

package main

/* pixel index in 3*3 kernel
   +---+---+---+
   | 0 | 1 | 2 |
   +---+---+---+
   | 3 | 4 | 5 |
   +---+---+---+
   | 6 | 7 | 8 |
   +---+---+---+
*/
/*
#define UP_LEFT      0
#define UP           1
#define UP_RIGHT     2
#define LEFT         3
#define CENTER       4
#define RIGHT        5
#define DOWN_LEFT    6
#define DOWN         7
#define DOWN_RIGHT   8
*/

const (
	UP_LEFT    = 0
	UP         = 1
	UP_RIGHT   = 2
	LEFT       = 3
	CENTER     = 4
	RIGHT      = 5
	DOWN_LEFT  = 6
	DOWN       = 7
	DOWN_RIGHT = 8
)

/* in order to accelerate exploring along tangent bidirectional, step by an increasing amount of pixels QUALITY(i)
   the max step count is 12
    +-----------------+---+---+---+---+---+---+---+---+---+---+---+---+
    |step index       | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 |10 |11 |
    +-----------------+---+---+---+---+---+---+---+---+---+---+---+---+
    |step pixels count|1.0|1.0|1.0|1.0|1.0|1.5|2.0|2.0|2.0|2.0|4.0|8.0|
    +-----------------+---+---+---+---+---+---+---+---+---+---+---+---+
*/
//#define STEP_COUNT_MAX   12
const STEP_COUNT_MAX = 12

func QUALITY(i int) float {
	if i < 5 {
		return 1.0
	}
	if i == 5 {
		return 1.5
	}
	if i < 10 {
		return 2.0
	}
	if i == 10 {
		return 4.0
	}
	if i == 11 {
		return 8.0
	}
	return 8.0
}

// L = 0.299 * R + 0.587 * G + 0.114 * B
func RGB2LUMA(color vec3) float {
	return dot(vec3(0.299, 0.587, 0.114), color)
}

/*
#define EDGE_THRESHOLD_MIN  0.0312
#define EDGE_THRESHOLD_MAX  0.125
#define SUBPIXEL_QUALITY    0.75
#define GRADIENT_SCALE      0.25
*/
const (
	EDGE_THRESHOLD_MIN = 0.0312
	EDGE_THRESHOLD_MAX = 0.125
	SUBPIXEL_QUALITY   = 0.75
	GRADIENT_SCALE     = 0.25
)

func texture(uv vec2) vec4 {
	size := imageSrc0Size()
	uv.y = 1 - uv.y
	uv *= size
	p0 := uv - 1/2.0
	p1 := uv + 1/2.0
	c0 := imageSrc0UnsafeAt(p0)
	c1 := imageSrc0UnsafeAt(vec2(p1.x, p0.y))
	c2 := imageSrc0UnsafeAt(vec2(p0.x, p1.y))
	c3 := imageSrc0UnsafeAt(p1)
	rate := fract(p1)
	clr := mix(mix(c0, c1, rate.x), mix(c2, c3, rate.x), rate.y)
	return clr
}

func fxaa_3_11(uv, uv_step vec2) vec4 {
	KERNEL_STEP_MAT := [9]vec2{
		vec2(-1.0, 1.0), vec2(0.0, 1.0), vec2(1.0, 1.0),
		vec2(-1.0, 0.0), vec2(0.0, 0.0), vec2(1.0, 0.0),
		vec2(-1.0, -1.0), vec2(0.0, -1.0), vec2(1.0, -1.0),
	}
	// get luma of kernel
	luma_mat := [9]float{}
	for i := 0; i < 9; i++ {
		luma_mat[i] = RGB2LUMA(texture(uv + uv_step*KERNEL_STEP_MAT[i]).rgb)
	}

	// detecting where to apply FXAA, return the pixel color if not
	luma_min := min(luma_mat[CENTER], min(min(luma_mat[UP], luma_mat[DOWN]), min(luma_mat[LEFT], luma_mat[RIGHT])))
	luma_max := max(luma_mat[CENTER], max(max(luma_mat[UP], luma_mat[DOWN]), max(luma_mat[LEFT], luma_mat[RIGHT])))
	luma_range := luma_max - luma_min
	if luma_range < max(EDGE_THRESHOLD_MIN, luma_max*EDGE_THRESHOLD_MAX) {
		return texture(uv)
	}

	// choosing edge tangent
	// horizontal: |(upleft-left)-(left-downleft)|+2*|(up-center)-(center-down)|+|(upright-right)-(right-downright)|
	// vertical: |(upright-up)-(up-upleft)|+2*|(right-center)-(center-left)|+|(downright-down)-(down-downleft)|
	luma_horizontal := abs(luma_mat[UP_LEFT]+luma_mat[DOWN_LEFT]-2.0*luma_mat[LEFT]) +
		2.0*abs(luma_mat[UP]+luma_mat[DOWN]-2.0*luma_mat[CENTER]) +
		abs(luma_mat[UP_RIGHT]+luma_mat[DOWN_RIGHT]-2.0*luma_mat[RIGHT])
	luma_vertical := abs(luma_mat[UP_LEFT]+luma_mat[UP_RIGHT]-2.0*luma_mat[UP]) +
		2.0*abs(luma_mat[LEFT]+luma_mat[RIGHT]-2.0*luma_mat[CENTER]) +
		abs(luma_mat[DOWN_LEFT]+luma_mat[DOWN_RIGHT]-2.0*luma_mat[DOWN])
	is_horizontal := luma_horizontal > luma_vertical

	// choosing edge normal
	gradient_down_left := luma_mat[LEFT]
	gradient_up_right := luma_mat[RIGHT]
	if is_horizontal {
		gradient_down_left = luma_mat[DOWN]
		gradient_up_right = luma_mat[UP]
	}
	gradient_down_left -= luma_mat[CENTER]
	gradient_up_right -= luma_mat[CENTER]
	is_down_left := abs(gradient_down_left) > abs(gradient_up_right)

	// get the change rate of gradient in normal per pixel
	gradient := gradient_up_right
	// get the tangent uv step vector and the normal uv step vector
	step_normal := vec2(1.0)
	if is_down_left {
		gradient = gradient_down_left
		step_normal *= -1.0
	}
	step_tangent := vec2(0.0, 1.0)
	if is_horizontal {
		step_tangent = vec2(1.0, 0.0)
		step_normal *= vec2(0, 1)
	} else {
		step_normal *= vec2(1, 0)
	}
	step_normal *= uv_step
	step_tangent *= uv_step

	// start at middle point of tangent edge
	uv_start := uv + 0.5*step_normal
	luma_average_start := luma_mat[CENTER] + gradient*0.5

	// explore along tangent bidirectional until reach the edge both
	uv_pos := uv_start + step_tangent
	uv_neg := uv_start - step_tangent
	delta_luma_pos := RGB2LUMA(texture(uv_pos).rgb) - luma_average_start
	delta_luma_neg := RGB2LUMA(texture(uv_neg).rgb) - luma_average_start
	reached_pos := abs(delta_luma_pos) > (GRADIENT_SCALE * abs(gradient))
	reached_neg := abs(delta_luma_neg) > (GRADIENT_SCALE * abs(gradient))
	reached_both := reached_pos && reached_neg
	if !reached_pos {
		uv_pos += step_tangent
	}
	if !reached_neg {
		uv_neg -= step_tangent
	}
	if !reached_both {
		for i := 2; i < STEP_COUNT_MAX; i++ {
			if !reached_pos {
				delta_luma_pos = RGB2LUMA(texture(uv_pos).rgb) - luma_average_start
			}
			if !reached_neg {
				delta_luma_neg = RGB2LUMA(texture(uv_neg).rgb) - luma_average_start
			}

			reached_pos := abs(delta_luma_pos) > (GRADIENT_SCALE * abs(gradient))
			reached_neg := abs(delta_luma_neg) > (GRADIENT_SCALE * abs(gradient))
			reached_both := reached_pos && reached_neg

			if !reached_pos {
				uv_pos += (QUALITY(i) * step_tangent)
			}
			if !reached_neg {
				uv_neg -= (QUALITY(i) * step_tangent)
			}
			if reached_both {
				break
			}
		}
	}

	// estimating offset
	length_pos := max(abs(uv_pos-uv_start).x, abs(uv_pos-uv_start).y)
	length_neg := max(abs(uv_neg-uv_start).x, abs(uv_neg-uv_start).y)
	is_pos_near := length_pos < length_neg

	length_pixel_off := length_neg
	delta_luma := delta_luma_neg
	if is_pos_near {
		length_pixel_off = length_pos
		delta_luma = delta_luma_pos
	}
	pixel_offset := -1.*length_pixel_off/(length_pos+length_neg) + 0.5

	// no offset if the bidirectional point is too far
	if (delta_luma < 0) == (luma_mat[CENTER] < luma_average_start) {
		pixel_offset = 0
	}

	// subpixel antialiasing
	luma_average_center := 0.0
	average_weight_mat := [9]float{
		1.0, 2.0, 1.0,
		2.0, 0.0, 2.0,
		1.0, 2.0, 1.0,
	}
	for i := 0; i < 9; i++ {
		luma_average_center += (average_weight_mat[i] * luma_mat[i])
	}
	luma_average_center /= 12.0

	subpixel_luma_range := clamp(abs(luma_average_center-luma_mat[CENTER])/luma_range, 0.0, 1.0)
	subpixel_offset := (-2.0*subpixel_luma_range + 3.0) * subpixel_luma_range * subpixel_luma_range
	subpixel_offset = subpixel_offset * subpixel_offset * SUBPIXEL_QUALITY

	// use the max offset between subpixel offset with before
	pixel_offset = max(pixel_offset, subpixel_offset)
	return texture(uv + pixel_offset*step_normal)
}

func Fragment(dst vec4, src vec2, color vec4) vec4 {
	origin := imageSrc0Origin()
	size := imageSrc0Size()
	uv_step := vec2(1.) / size
	uv := (src - origin) / size
	uv.y = 1 - uv.y

	return fxaa_3_11(uv, uv_step)
}
